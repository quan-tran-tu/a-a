package llm_client

import (
	"context"
	"fmt"
	"os"

	"google.golang.org/genai"
)

var client *genai.Client

func InitGeminiClient() error {
	apiKey := os.Getenv("GEMINI_API_KEY")
	if apiKey == "" {
		return fmt.Errorf("GEMINI_API_KEY environment variable is not set")
	}

	ctx := context.Background()
	var err error
	client, err = genai.NewClient(ctx, &genai.ClientConfig{
		APIKey:  apiKey,
		Backend: genai.BackendGeminiAPI,
	})
	if err != nil {
		return fmt.Errorf("failed to create genai client: %w", err)
	}
	return nil
}

func Generate(prompt string, model string) (string, error) {
	if client == nil {
		return "", fmt.Errorf("LLM client is not initialized")
	}

	if model == "" {
		model = "gemini-2.0-flash"
	}

	ctx := context.Background()
	result, err := client.Models.GenerateContent(ctx, model, genai.Text(prompt), nil)
	if err != nil {
		return "", fmt.Errorf("failed to generate content via Gemini: %w", err)
	}

	if len(result.Candidates) == 0 || len(result.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no content generated by Gemini")
	}

	// Get the first text part from the first candidate
	part := result.Candidates[0].Content.Parts[0]
	if part.Text == "" {
		return "", fmt.Errorf("generated content has no text")
	}

	generatedText := part.Text

	return generatedText, nil
}

func GenerateJSON(prompt, model string, responseJsonSchema any) (string, error) {
	if client == nil {
		return "", fmt.Errorf("LLM client is not initialized")
	}
	if model == "" {
		model = "gemini-2.0-flash"
	}
	cfg := &genai.GenerateContentConfig{
		// Force JSON output in candidates
		ResponseMIMEType: "application/json",
	}
	if responseJsonSchema != nil {
		cfg.ResponseJsonSchema = responseJsonSchema
	}
	ctx := context.Background()
	resp, err := client.Models.GenerateContent(ctx, model, genai.Text(prompt), cfg)
	if err != nil {
		return "", fmt.Errorf("failed to generate JSON via Gemini: %w", err)
	}
	if len(resp.Candidates) == 0 || len(resp.Candidates[0].Content.Parts) == 0 {
		return "", fmt.Errorf("no JSON generated by Gemini")
	}
	part := resp.Candidates[0].Content.Parts[0]
	if part.Text == "" {
		return "", fmt.Errorf("generated JSON has no text")
	}
	return part.Text, nil
}
